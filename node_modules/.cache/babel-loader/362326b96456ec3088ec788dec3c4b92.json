{"ast":null,"code":"import _defineProperty from\"/home/rhythm/Documents/Pathfinder/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _slicedToArray from\"/home/rhythm/Documents/Pathfinder/node_modules/@babel/runtime/helpers/esm/slicedToArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import React,{useState,useEffect}from'react';import Node from'./Node/Node';import{dijkstra,getNodesInShortestPathOrder}from'../algorithms/dijkstra';import'./PathfindingVisualizer.css';//Green Node\nvar START_NODE_ROW=5;var START_NODE_COL=5;//Red Node\nvar FINISH_NODE_ROW=5;var FINISH_NODE_COL=10;var PathFinder=function PathFinder(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),grid=_useState2[0],setGrid=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),mouseIsPressed=_useState4[0],setMouseIsPressed=_useState4[1];var getInitialGrid=function getInitialGrid(){var grid=[];for(var row=0;row<11;row++){var currentRow=[];for(var col=0;col<15;col++){currentRow.push(createNode(col,row));}grid.push(currentRow);}console.log(grid);return grid;};var createNode=function createNode(col,row){return{col:col,row:row,isStart:row===START_NODE_ROW&&col===START_NODE_COL,isFinish:row===FINISH_NODE_ROW&&col===FINISH_NODE_COL,distance:Infinity,isVisited:false,isWall:false,previousNode:null};};var getNewGridWithWallToggled=function getNewGridWithWallToggled(grid,row,col){var newGrid=grid.slice();var node=newGrid[row][col];var newNode=_objectSpread({},node,{isWall:!node.isWall});newGrid[row][col]=newNode;return newGrid;};useEffect(function(){var grid=getInitialGrid();setGrid(grid);},[]);function handleClick(row,col){var newGrid=getNewGridWithWallToggled(grid,row,col);setGrid(newGrid);}function animateDijkstra(visitedNodesInOrder,nodesInShortestPathOrder){var _loop=function _loop(i){if(i===visitedNodesInOrder.length){setTimeout(function(){animateShortestPath(nodesInShortestPathOrder);},20*i);return{v:void 0};}setTimeout(function(){var node=visitedNodesInOrder[i];document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node node-visited';},20*i);};for(var i=0;i<=visitedNodesInOrder.length;i++){var _ret=_loop(i);if(typeof _ret===\"object\")return _ret.v;}}function animateShortestPath(nodesInShortestPathOrder){var _loop2=function _loop2(i){setTimeout(function(){var node=nodesInShortestPathOrder[i];document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node node-shortest-path';},100*i);};for(var i=0;i<nodesInShortestPathOrder.length;i++){_loop2(i);}}function visualizeDijkstra(){var startNode=grid[START_NODE_ROW][START_NODE_COL];var finishNode=grid[FINISH_NODE_ROW][FINISH_NODE_COL];//Get relevant information\nvar visitedNodesInOrder=dijkstra(grid,startNode,finishNode);var nodesInShortestPathOrder=getNodesInShortestPathOrder(finishNode);//Perform visual animation\nanimateDijkstra(visitedNodesInOrder,nodesInShortestPathOrder);}return React.createElement(React.Fragment,null,React.createElement(\"br\",null),\" \",React.createElement(\"br\",null),React.createElement(\"button\",{className:\"btn\",onClick:function onClick(){return visualizeDijkstra();}},\"Visualize Dijkstra's Algorithm\"),React.createElement(\"div\",{className:\"grid\"},grid.map(function(row,i){return React.createElement(\"div\",{key:i},row.map(function(node,j){var row=node.row,col=node.col,isFinish=node.isFinish,isStart=node.isStart,isWall=node.isWall;return React.createElement(Node,{key:j,col:col,isFinish:isFinish,isStart:isStart,isWall:isWall,mouseIsPressed:mouseIsPressed,onMouseClick:function onMouseClick(){handleClick(row,col);},row:row});}));})));};export default PathFinder;","map":{"version":3,"sources":["/home/rhythm/Documents/Pathfinder/src/PathfindingVisualizer/PathFinder.jsx"],"names":["React","useState","useEffect","Node","dijkstra","getNodesInShortestPathOrder","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathFinder","grid","setGrid","mouseIsPressed","setMouseIsPressed","getInitialGrid","row","currentRow","col","push","createNode","console","log","isStart","isFinish","distance","Infinity","isVisited","isWall","previousNode","getNewGridWithWallToggled","newGrid","slice","node","newNode","handleClick","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","document","getElementById","className","visualizeDijkstra","startNode","finishNode","map","j"],"mappings":"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","sourcesContent":["import React, {useState ,useEffect} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\n\nimport './PathfindingVisualizer.css';\n\n//Green Node\nconst START_NODE_ROW = 5;\nconst START_NODE_COL = 5;\n\n//Red Node\nconst FINISH_NODE_ROW = 5;\nconst FINISH_NODE_COL = 10;\n\n\nconst PathFinder = () => {\n  const [grid, setGrid] = useState([]);\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n\n  const getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 11; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 15; col++) {\n        currentRow.push(createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n    console.log(grid);\n    return grid;\n  };\n  \n  const createNode = (col, row) => {\n    return {\n      col,\n      row,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n    };\n  };\n  \n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n  \n  \n  useEffect(() => {\n    const grid = getInitialGrid();\n    setGrid(grid);\n  }, []);\n\n  \n  function handleClick(row,col){\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\n    setGrid(newGrid);\n  }\n\n  function animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          animateShortestPath(nodesInShortestPathOrder);\n        }, 20 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 20 * i);\n    }\n  }\n\n  function animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 100 * i);\n    }\n  }\n\n  function visualizeDijkstra() {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n\n    //Get relevant information\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n\n    //Perform visual animation\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n    return (\n        <>\n          <br /> <br />\n          <button className='btn' onClick={() => visualizeDijkstra()}>\n            Visualize Dijkstra's Algorithm\n          </button>\n          <div className=\"grid\">\n            {grid.map((row, i) => {\n              return (\n                <div key={i}>\n                  {row.map((node, j) => {\n                    const {row, col, isFinish, isStart, isWall} = node;\n                    return (\n                      <Node\n                        key={j}\n                        col={col}\n                        isFinish={isFinish}\n                        isStart={isStart}\n                        isWall={isWall}\n                        mouseIsPressed={mouseIsPressed}\n                        onMouseClick={()=>{handleClick(row,col)}}\n                        row={row}>\n                        </Node>\n                    );\n                  })}\n                </div>\n              );\n            })}\n          </div>\n        </>\n      );\n}\n\nexport default PathFinder;"]},"metadata":{},"sourceType":"module"}